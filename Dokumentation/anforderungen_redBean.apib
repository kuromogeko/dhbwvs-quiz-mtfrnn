FORMAT: 1A

# Quiz

Quiz Api auf Basis von PHP RedBean, um Datenbankzugriffe zu ermöglichen

## Erklärungen

Requests: 

- Header: Der Header beinhaltet Informationen für die Ausführung der Abfrage
- Body: Der Body enthält Daten, welche eingetragen werden sollen
- session Token (token): Der Token wird mitgegeben, wenn für die Ausführung der Aktion eine Anmeldung erforderlich ist. Aktuell angemeldete Nutzer sind in der sessions Tabelle hinterlegt

Responses:

- Response Code 200: Bedeutet, dass die Aktion erfolgreich durchgeführt worden ist und beinhaltet ggf. das Ergebnis der Abfrage
- Response Code 400: Bedeutet, dass bei der Aktion ein Fehler aufgetreten ist

# Group Quiz 

***DB Tabelle Quiz***<br>
Anforderungen an die/ Funktion der Quiz Schnittstelle

## Quiz Anfragen [/quiz]
### Liste der Quizze [GET]

+ Request

	+ Headers 
			
			action: list

+ Response 200 (application/json)

		{
		    "1": {
		        "id": "1",
		        "name": "Quiz 1",
		        "description": "Quiz 1 Beschreibung",
		        "user_iduser": "1",
		        "category_idcategory": "1"
		    },
		    "2": {
		        "id": "2",
		        "name": "Quiz 2",
		        "description": "Quiz 2 Beschreibung",
		        "user_iduser": "1",
		        "category_idcategory": "1"
		    }
		}

### Quiz Eintrag anfordern [GET]

+ Request

	+ Headers

			action: entry
			id: 1

+ Response 200 (application/json)
		
		{
			"id": 1,
			"name": "Name des Quiz",
			"description": "Beschreibung des Quiz",
			"user": "Nutzername des Ersteller",
			"user_id": 12,
			"user_description" : "Beschreibung des	Nutzers aus dem Profil",
			"category" : "Kategorie des Quiz (String)"
		}

### Quiz vollständig anfordern [GET]

+ Request
	
	+ Headers

			action: fullQuiz
			id: 1

+ Response 200 (application/json)
		
		{
			"id": 7,
			"name":"Quiz name 2", 
			"description": "Beschreibung des Quiz",
			"user" : "Nutzername des Ersteller",
			"user_description" : "Beschreibung des	Nutzers aus dem Profil",
			"category" : "Kategorie des Quiz (String)",
			"questions":
				[
					{
						"text": "Der Inhalt der Frage",
						"answers":
							[
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": true
								}
							]
					},
					{
						"text": "Der Inhalt der Frage",
						"answers":
							[
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": true
								}
							]
					},
					{
						"text": "Der Inhalt der Frage",
						"answers":
							[
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": false
								},
								{
									"text": "Der Inhalt einer Antwortmöglichkeit",
									"is_correct": true
								}
							]
					}
				]
		}

### Quiz hinzufügen [POST]

+ Request

	+ Headers
			
			action: addQuiz
			token: sessionToken

	+ Body

			{
			  "name": "Name des Quiz",
			  "description": "Beschreibung des Quiz",
			  "user_iduser": 1,
			  "category_idcategory": 1
			}

+ Response 200 (application/json)
		
		{
			"status": "ok",
			"quiz_id": 12
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Quiz aktualisieren (ändern) [PUT]

+ Request

	+ Headers

			action: updateQuiz
			id: 12
			token: sessionToken

	+ Body
			
			{
				"name": "Name des Quiz",
				"description": "Beschreibung des Quiz",
				"user_id": 12,
				"category" : "Kategorie des Quiz (Id)"
			}

+ Response 200 (application/json)
		
		{
			"status": "ok"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Quiz entfernen [DELETE]

Ein Quiz darf nur dann entfernt werden, wenn keine Fragen anhängen. Oder alle Fragen und dazugehörigen Antworten mitgelöscht werden.

+ Request
	
	+ Headers

			action: deleteQuiz
			id: 12
			token: sessionToken

+ Response 200 (application/json)

		{
			"status": "ok"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

# Group Frage

***DB Tabelle Question***<br>
Alle Fragebezogenen Anfragen sind in dieser Gruppe

## Fragen Anfragen [/question]
### Liste der zu einem Quiz zugehörigen Fragen [GET]
**URL ZUSATZ: /quiz/{id}**

+ Response 200 (application/json)

		{
			"1": {
				"id": "1",
				"text": "Sage P. Cote",
				"Quiz_idQuiz": "1"
			},
			"2": {
				"id": "2",
				"text": "Kiona M. Foster",
				"Quiz_idQuiz": "1"
			},
			"3": {
				"id": "3",
				"text": "Britanney W. Keith",
				"Quiz_idQuiz": "1"
			},
			"4": {
				"id": "4",
				"text": "Ingrid F. Hogan",
				"Quiz_idQuiz": "1"
			},
			"5": {
				"id": "5",
				"text": "Noah S. Glass",
				"Quiz_idQuiz": "1"
			},
			"6": {
				"id": "6",
				"text": "DAS IST GEÄNDERTE ERSTELLTE FRAGE",
				"Quiz_idQuiz": "1"
			},
			"8": {
				"id": "8",
				"text": "DAS IST EINE ERSTELLTE FRAGE",
				"Quiz_idQuiz": "1"
			}
		} 

### Einzelne Frage anfordern [GET]
**URL ZUSATZ: /{id}**

+ Response 200 (application/json)

		{
			"id": "1",
			"text": "Sage P. Cote",
			"Quiz_idQuiz": "1"
		}

### Frage erstellen [POST]

+ Request
	
	+ Header

			token: sessionToken

	+ Body

			{
				"text": "Inhalt der Frage",
				"quiz_idquiz": 15
			}

+ Response 200 (application/json)

		{
			"status":"ok",
			"id": 178
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Frage ändern [PUT]
**URL ZUSATZ: /{id}**

+ Request
	
	+ Header

			token: sessionToken

	+ Body

			{
				"text": "Inhalt der Frage",
				"quiz_idquiz": 15
			}

+ Response 200 (application/json)
		
		{
			"status": "ok"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Frage löschen [DELETE]
**URL ZUSATZ: /{id}**

Eine Frage darf nur dann gelöscht werden, wenn keine Antworten anhängend sind.

+ Request
	
	+ Header

			token: sessionToken

+ Response 200 (application/json)

		{
			"status": "ok"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

# Group Antwort

***DB Tabelle: Answer***<br>
Fasst Schnittstelle für Antworten zusammen

## Antworten Anfragen [/answer]
### Liste von Antworten nach Frage ID [GET]
**URL ZUSATZ: /question/{id}**

+ Response 200 (application/json)
		
		{
			"1": {
				"id": "1",
				"text": "Duffel",
				"Question_idQuestion": "1",
				"is_correct": "0"
			},
			"6": {
				"id": "6",
				"text": "Łódź",
				"Question_idQuestion": "1",
				"is_correct": "1"
			},
			"11": {
				"id": "11",
				"text": "Westmalle",
				"Question_idQuestion": "1",
				"is_correct": "0"
			},
			"16": {
				"id": "16",
				"text": "Bostaniçi",
				"Question_idQuestion": "1",
				"is_correct": "1"
			},
			"21": {
				"id": "21",
				"text": "Tiltil",
				"Question_idQuestion": "1",
				"is_correct": "1"
			},
			"26": {
				"id": "26",
				"text": "das ist ANDERE eine Antwort",
				"Question_idQuestion": "1",
				"is_correct": "0"
			}
		}

### Einzelne Antwort nach ID [GET]
**URL ZUSATZ: /{id}**

+ Response 200 (application/json)
		
		{
			"id": "1",
			"text": "Duffel",
			"Question_idQuestion": "1",
			"is_correct": "0"
		}

### Antwort erstellen [POST]

+ Request

	+ Header

			token: sessionToken

	+ Body

			{
				"text": "Der Inhalt der Antwort",
				"question_idquestion": 7,
				"is_correct": 0
			}

+ Response 200 (application/json)
		
		{
			"status": "ok",
			"id": 546
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}
		
### Antwort anpassen [PUT]
**URL ZUSATZ: /{id}**

+ Request
	
	+ Header

			token: sessionToken

	+ Body

			{
				"text": "Der Inhalt der Antwort",
				"question_idquestion": 9,
				"is_correct": 0
			}

+ Response 200 (application/json)
		
		{
			"status": "ok"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Antwort löschen [DELETE]
**URL ZUSATZ: /{id}**

+ Request
	
	+ Header

			token: sessionToken

+ Response 200 (application/json)
		
		{
			"status":"ok"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

# Group Nutzer

***DB Tabelle user***<br>
Nutzerbezogene Aktionen werden damit durchgeführt

## Nutzer Anfragen [/user]
### Nutzer by ID [GET]
**URL ZUSATZ: /{id}**

+ Response 200 (application/json)
		
		{
			"id": "7",
			"uname": "Gary",
			"description": "aliquet libero. Integer"
		}

### Nutzer LOGIN [GET]
**URL ANDERS: /login**

+ Request

	+ Header

			uname: username
			pwd: PWD

+ Response 200 (application/json)
		
		{
			"status": "ok",
			"token" : "asdfghjiebweiselvs"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Get User by Name [GET]
**URL ZUSATZ: /{name}**

+ Response 200 (application/json)
		
		{
			"id": "7",
			"uname": "Gary",
			"description": "aliquet libero. Integer"
		}

### Nutzer erstellen [POST]

+ Request

	+ Body

			{
			"uname": "TestInsert2",
			"pwd": "asdf",
			"description": "User inserted to Test database fct."
			}

+ Response 200 (application/json)
		
		{
			"status":"ok",
			"id": 188
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Nutzer ändern [PUT]
**URL ZUSATZ: /{id}**

Für Änderungen beim Nutzer muss stets das Passwort neu eingetippt werden.

+ Request
	
	+ Header

			pwd: PWD
			token: sessionToken

	+ Body

			{
			"pwd": "asdf",
			"description": "AAAAAAAAAAAAAAAAAAAAAAA"
			}

+ Response 200 (application/json)

		{
			"status": "ok"
		}

### Nutzer löschen [DELETE]
**URL ZUSATZ: /{id}**

Ein Nutzer darf nur dann gelöscht werden, wenn er kein Quiz mehr besitzt.

+ Request
	
	+ Header

			pwd: pwd
			token: sessionToken

+ Response 200 (application/json)
		
		{
			"status": "ok"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

# Group Kategorie

***DB Tabelle category***<br>
Kategorienbezogene Anfragen befinden sich hier

## Anfragen Kategorien [/category]
### Liste der Kategorien [GET]

+ Response 200 (application/json)

		{
			"1":{
				"id": 27,
				"name": "name der Kategorie"
			},
			"3":{
				"id": 28,
				"name": "name der Kategorie"
			},
			"2":{
				"id": 29,
				"name": "name der Kategorie"
			}
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Einzelne Kategorie by ID [GET]
**URL ZUSATZ: /{id}**

+ Response 200 (application/json)
		
		{
			"id": 27,
			"name": "name der Kategorie"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Kategorie anlegen [POST]

+ Request
	
	+ Header

			token: sessionToken

	+ Body

			{
				"name": "Name der neuen Kategorie"
			}

+ Response 200 (application/json)
		
		{
			"status": "ok",
			"id": 297
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Kategorie ändern [PUT]
**URL ZUSATZ: /{id}**

+ Request
		
	+ Header

			token: sessionToken

	+ Body

			{
				"name": "neuer Name"
			}

+ Response 200 (application/json)
		
		{
			"status": "ok"
		}

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

### Kategorie löschen [DELETE]
**URL ZUSATZ: /{id}**

Entfernt die Kategorie. Soll nur dann gehen, wenn die Kategorie nicht benutzt wird.<br>

+ Request
		
	+ Header

			token: sessionToken

+ Response 200 (application/json)
		
		{
			"status": "ok"
		} 

+ Response 400 (application/json)
		
		{
			"status": "failed"
		}

# Group Sessions
## Anfragen zu Nutzersessions [/sessions]
### Ausloggen aus der aktuellen Session [DELETE]

Beendet die aktuelle Session und entfernt den Token aus der Datenbank

+ Request
	
	+ Header

			token: sessionToken

+ Response 200 (application/json)
		
		{
			"status":"ok"
		}